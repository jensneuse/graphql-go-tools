package main

import ast "github.com/jensneuse/graphql-go-tools/pkg/ast"

type DataSource struct {
	NonNullString                 string
	NullableString                *string
	NonNullInt                    int64
	NullableInt                   *int64
	NonNullBoolean                bool
	NullableBoolean               *bool
	NonNullFloat                  float32
	NullableFloat                 *float32
	NullableListOfNullableString  *[]*string
	NonNullListOfNullableString   []*string
	NonNullListOfNonNullString    []string
	NullableListOfNullableHeader  *[]*Header
	NonNullListOfNullableHeader   []*Header
	NonNullListOfNonNullParameter []Parameter
}

func (d *DataSource) Unmarshal(doc *ast.Document, ref int) {
	for _, i := range doc.Directives[ref].Arguments.Refs {
		name := doc.ArgumentNameString(i)
		switch name {
		case "nonNullString":
			val := doc.StringValueContentString(doc.ArgumentValue(i).Ref)
			d.NonNullString = &val
		case "nullableString":
			val := doc.StringValueContentString(doc.ArgumentValue(i).Ref)
			d.NullableString = val
		case "nonNullInt":
			val := doc.IntValueAsInt(doc.ArgumentValue(i).Ref)
			d.NonNullInt = &val
		case "nullableInt":
			val := doc.IntValueAsInt(doc.ArgumentValue(i).Ref)
			d.NullableInt = val
		case "nonNullBoolean":
			val := bool(doc.BooleanValue(doc.ArgumentValue(i).Ref))
			d.NonNullBoolean = &val
		case "nullableBoolean":
			val := bool(doc.BooleanValue(doc.ArgumentValue(i).Ref))
			d.NullableBoolean = val
		case "nonNullFloat":
			val := doc.FloatValueAsFloat32(ref)
			d.NonNullFloat = &val
		case "nullableFloat":
			val := doc.FloatValueAsFloat32(ref)
			d.NullableFloat = val
		}
	}
}

type Header struct {
	Key   string
	Value string
}
type Parameter struct {
	Name         string
	SourceKind   PARAMETER_SOURCE
	SourceName   string
	VariableType string
}
type HTTP_METHOD int

const (
	UNDEFINED_HTTP_METHOD HTTP_METHOD = iota
	HTTP_METHOD_GET
	HTTP_METHOD_POST
	HTTP_METHOD_UPDATE
	HTTP_METHOD_DELETE
)

type PARAMETER_SOURCE int

const (
	UNDEFINED_PARAMETER_SOURCE PARAMETER_SOURCE = iota
	PARAMETER_SOURCE_CONTEXT_VARIABLE
	PARAMETER_SOURCE_OBJECT_VARIABLE_ARGUMENT
	PARAMETER_SOURCE_FIELD_ARGUMENTS
)
