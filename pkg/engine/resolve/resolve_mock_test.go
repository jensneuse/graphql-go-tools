// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jensneuse/graphql-go-tools/pkg/engine/resolve (interfaces: DataSource)

// Package resolve is a generated GoMock package.
package resolve

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataSource is a mock of DataSource interface
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockDataSource) Load(arg0 context.Context, arg1 []byte, arg2 *BufPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockDataSourceMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDataSource)(nil).Load), arg0, arg1, arg2)
}

// UniqueIdentifier mocks base method
func (m *MockDataSource) UniqueIdentifier() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueIdentifier")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// UniqueIdentifier indicates an expected call of UniqueIdentifier
func (mr *MockDataSourceMockRecorder) UniqueIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueIdentifier", reflect.TypeOf((*MockDataSource)(nil).UniqueIdentifier))
}
